name: CI

on:
  create:
    tags:
      - "*" # run on all tags
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        django-version: ["4.2", "5.0", "5.1"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Poetry virtual environment
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-v1-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-v1-
      - name: Install Poetry
        run: pip install poetry
      - name: Set poetry to use virtualenvs.in-project true
        run: |
          poetry config virtualenvs.in-project true
      - name: Install dependencies
        run: |
          poetry install --with dev
      - name: Install Django
        run: |
          poetry run pip install django~=${{ matrix.django-version }}
      - name: Cache pre-commit hooks
        if: matrix.python-version == '3.13' && matrix.django-version == '5.1'
        id: pre-commit-cache
        uses: actions/cache@v4
        with:
          path: $HOME/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-hooks-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-hooks-
      - name: Run pre-commit
        if: matrix.python-version == '3.13' && matrix.django-version == '5.1'
        run: |
          poetry run pre-commit run --all-files
      - name: Run tests and coverage
        run: |
          poetry run coverage run --source=highlightjs manage.py test
          # output coverage report
          poetry run coverage report
          # output coverage report in xml format
          poetry run coverage xml
      - name: Publish coverage
        if: matrix.python-version == '3.13' && matrix.django-version == '5.1'
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish package
        if: matrix.python-version == '3.13' && matrix.django-version == '5.1' && startsWith(github.ref, 'refs/tags')
        run: |
          echo "Publishing package to PyPI"
          echo "poetry version: $(poetry --version)"
          poetry build
          poetry publish --username=__token__ --password=${{ secrets.PYPI_SECRET }}
